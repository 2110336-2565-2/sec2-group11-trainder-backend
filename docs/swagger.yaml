definitions:
  controllers.BookingForm:
    properties:
      date:
        type: string
      endTime:
        type: string
      startTime:
        type: string
      trainer:
        type: string
    type: object
  controllers.CreatePaymentForm:
    properties:
      bookingID:
        description: amount is temp should handle via booking id and calculate
        type: string
      token:
        type: string
    required:
    - bookingID
    - token
    type: object
  controllers.DeleteBookingForm:
    properties:
      bookingId:
        type: string
    required:
    - bookingId
    type: object
  controllers.FilterTrainerForm:
    properties:
      feeMax:
        type: integer
      feeMin:
        type: integer
      limit:
        type: integer
      specialty:
        items:
          type: string
        type: array
    required:
    - limit
    type: object
  controllers.GetReviewsForm:
    properties:
      limit:
        type: integer
      trainerUsername:
        type: string
    required:
    - limit
    - trainerUsername
    type: object
  controllers.GetTrainerForm:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  controllers.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.PayoutForm:
    properties:
      bookingID:
        type: string
    required:
    - bookingID
    type: object
  controllers.ProfileDetails:
    properties:
      address:
        type: string
      avatarUrl:
        type: string
      birthdate:
        type: string
      citizenId:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      phoneNumber:
        type: string
    required:
    - address
    - birthdate
    - citizenId
    - firstname
    - gender
    - lastname
    - phoneNumber
    type: object
  controllers.RegisterInput:
    properties:
      address:
        type: string
      avatarUrl:
        type: string
      birthdate:
        type: string
      citizenId:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      lat:
        type: number
      lng:
        type: number
      password:
        type: string
      phoneNumber:
        type: string
      username:
        type: string
      usertype:
        type: string
    required:
    - address
    - birthdate
    - citizenId
    - firstname
    - gender
    - lastname
    - lat
    - lng
    - password
    - phoneNumber
    - username
    - usertype
    type: object
  controllers.RequestPayoutForm:
    properties:
      accountName:
        type: string
      accountNumber:
        type: string
      bank:
        type: string
      bookingID:
        type: string
    required:
    - accountName
    - accountNumber
    - bank
    - bookingID
    type: object
  controllers.ReviewDetails:
    properties:
      comment:
        type: string
      rating:
        type: integer
      trainerUsername:
        type: string
    required:
    - rating
    - trainerUsername
    type: object
  controllers.TraineeReviewableForm:
    properties:
      trainerUsername:
        type: string
    required:
    - trainerUsername
    type: object
  controllers.UpdateBookingForm:
    properties:
      bookingId:
        type: string
      status:
        type: string
    required:
    - bookingId
    type: object
  controllers.UpdateTrainerDetails:
    properties:
      certificateUrl:
        type: string
      fee:
        type: integer
      rating:
        type: number
      specialty:
        items:
          type: string
        type: array
      traineeCount:
        type: integer
    type: object
  models.AllChat:
    properties:
      audience:
        type: string
      message:
        $ref: '#/definitions/models.Message'
    type: object
  models.Booking:
    properties:
      _id:
        type: string
      endDateTime:
        type: string
      payment:
        $ref: '#/definitions/models.Payment'
      startDateTime:
        type: string
      status:
        type: string
      trainee:
        type: string
      trainer:
        type: string
    type: object
  models.FilteredTrainerInfo:
    properties:
      address:
        type: string
      avatarUrl:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      trainerInfo:
        $ref: '#/definitions/models.TrainerInfo'
      username:
        type: string
    type: object
  models.Message:
    properties:
      content:
        type: string
      createdAt:
        type: string
      sender:
        type: string
    type: object
  models.NameAndRole:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      usertype:
        type: string
    type: object
  models.Payment:
    properties:
      accountName:
        type: string
      accountNumber:
        type: string
      bank:
        type: string
      chargeID:
        type: string
      status:
        type: string
      totalCost:
        type: integer
    type: object
  models.ReturnBooking:
    properties:
      _id:
        type: string
      endDateTime:
        type: string
      payment:
        $ref: '#/definitions/models.Payment'
      startDateTime:
        type: string
      status:
        type: string
      trainee:
        type: string
      traineeFirstName:
        type: string
      traineeLastName:
        type: string
      trainer:
        type: string
      trainerFirstName:
        type: string
      trainerLastName:
        type: string
    type: object
  models.Review:
    properties:
      comment:
        type: string
      createdAt:
        type: string
      rating:
        type: integer
      username:
        type: string
    type: object
  models.TrainerInfo:
    properties:
      certificateUrl:
        type: string
      fee:
        type: integer
      rating:
        type: number
      specialty:
        items:
          type: string
        type: array
      traineeCount:
        type: integer
    type: object
  models.UserProfile:
    properties:
      address:
        type: string
      avatarUrl:
        type: string
      birthdate:
        type: string
      citizenId:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      lat:
        type: number
      lng:
        type: number
      phoneNumber:
        type: string
      username:
        type: string
      usertype:
        type: string
    type: object
  responses.AddReviewResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  responses.AllChatResponse:
    properties:
      allChat:
        items:
          $ref: '#/definitions/models.AllChat'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  responses.BookingListResponse:
    properties:
      bookings:
        items:
          $ref: '#/definitions/models.Booking'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  responses.ChatRoomIDResponse:
    properties:
      message:
        type: string
      roomID:
        type: string
      status:
        type: integer
    type: object
  responses.CreatePaymentResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  responses.CurrentUserResponse:
    properties:
      message:
        type: string
      status:
        type: integer
      username:
        type: string
    type: object
  responses.DeleteBookingResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  responses.FilterTrainerResponse:
    properties:
      message:
        type: string
      status:
        type: integer
      trainers:
        items:
          $ref: '#/definitions/models.FilteredTrainerInfo'
        type: array
    type: object
  responses.GetBookingResponse:
    properties:
      booking:
        $ref: '#/definitions/models.Booking'
      message:
        type: string
      status:
        type: integer
    type: object
  responses.GetBookingsResponse:
    properties:
      bookings:
        items:
          $ref: '#/definitions/models.ReturnBooking'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  responses.ImageResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  responses.LoginResponse:
    properties:
      message:
        type: string
      status:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
  responses.NameAndRoleResponse:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/models.NameAndRole'
      status:
        type: integer
    type: object
  responses.PastChatResponse:
    properties:
      chatMessages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  responses.ProfileResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  responses.RegisterResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  responses.RequestPayoutResponse:
    properties:
      id:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  responses.ReviewableResponse:
    properties:
      canReview:
        type: boolean
      message:
        type: string
      status:
        type: integer
    type: object
  responses.TrainerProfileResponse:
    properties:
      message:
        type: string
      status:
        type: integer
      trainerInfo:
        $ref: '#/definitions/models.TrainerInfo'
      user:
        $ref: '#/definitions/models.UserProfile'
    type: object
  responses.TrainerReviewsResponse:
    properties:
      message:
        type: string
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      status:
        type: integer
    type: object
  responses.UpdateBookingResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  responses.UserProfileResponse:
    properties:
      message:
        type: string
      status:
        type: integer
      user:
        $ref: '#/definitions/models.UserProfile'
    type: object
info:
  contact: {}
  description: API for Trainder
  title: Trainder API
  version: "0.1"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: login with username and password
      parameters:
      - description: put login input and pass to  gin.Context
        in: body
        name: json_in_ginContext
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
      summary: Login
      tags:
      - authentication
  /protected/add-review:
    post:
      consumes:
      - application/json
      description: Add review on trainer to database
      parameters:
      - description: Parameters for trainer review
        in: body
        name: ReviewRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.ReviewDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AddReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.AddReviewResponse'
      security:
      - BearerAuth: []
      summary: Add trainer review
      tags:
      - Trainer
  /protected/booking:
    get:
      consumes:
      - application/json
      description: Retrieve a single booking using id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.GetBookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.GetBookingResponse'
      security:
      - BearerAuth: []
      summary: Get booking by ID
      tags:
      - bookings
  /protected/bookings:
    get:
      consumes:
      - application/json
      description: Retrieve a list of upcoming bookings for the user who is currently
        logged in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.GetBookingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.GetBookingsResponse'
      security:
      - BearerAuth: []
      summary: Get bookings for the logged in user
      tags:
      - bookings
  /protected/create-booking:
    post:
      consumes:
      - application/json
      description: Creates a new booking with the specified trainer, trainee, date,
        start time, and end time
      parameters:
      - description: put booking details and pass to gin.Context
        in: body
        name: json_in_ginContext
        required: true
        schema:
          $ref: '#/definitions/controllers.BookingForm'
      produces:
      - application/json
      responses:
        "200":
          description: booking created successfully
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new booking
      tags:
      - bookings
  /protected/create-payment:
    post:
      consumes:
      - application/json
      description: Create a payment using token and bookingId
      parameters:
      - description: details for creating payment
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CreatePaymentForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreatePaymentResponse'
      security:
      - BearerAuth: []
      summary: Create a payment
      tags:
      - payment
  /protected/delete-booking:
    delete:
      consumes:
      - application/json
      description: Delete a booking with the specified bookingId
      parameters:
      - description: put DeleteBookingForm details and pass to gin.Context
        in: body
        name: json_in_ginContext
        required: true
        schema:
          $ref: '#/definitions/controllers.DeleteBookingForm'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully delete booking
          schema:
            $ref: '#/definitions/responses.DeleteBookingResponse'
        "400":
          description: Bad Request, missing filed of objectId or cannot find bookingObjectId
          schema:
            $ref: '#/definitions/responses.DeleteBookingResponse'
      security:
      - BearerAuth: []
      summary: Delete a booking
      tags:
      - bookings
  /protected/filter-trainer:
    post:
      consumes:
      - application/json
      description: FilterTrainer base on filter input
      parameters:
      - description: Parameters for filtering trainers
        in: body
        name: FilterTrainer
        required: true
        schema:
          $ref: '#/definitions/controllers.FilterTrainerForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.FilterTrainerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FilterTrainerResponse'
      security:
      - BearerAuth: []
      summary: FilterTrainer base on filter input
      tags:
      - Trainer
  /protected/get-all-chats:
    get:
      consumes:
      - application/json
      description: Get all chat on sidebar that user communicate with with their latest
        message NOTICE THAT all time in chat is at UTC
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AllChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.AllChatResponse'
      security:
      - BearerAuth: []
      summary: Get all chat on sidebar that user communicate with
      tags:
      - chats
  /protected/get-name-and-role:
    get:
      consumes:
      - application/json
      description: Get first name, last name, and role of any user given username
      parameters:
      - description: username of the person you want
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.NameAndRoleResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.NameAndRoleResponse'
      security:
      - BearerAuth: []
      summary: Get first name, last name, and role of any user given username
      tags:
      - Helper
  /protected/get-past-chat:
    get:
      consumes:
      - application/json
      description: Get all messages that user communicate with specific audience NOTICE
        THAT all time in chat is at UTC
      parameters:
      - description: audience of this conversation (username)
        in: query
        name: audience
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PastChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.PastChatResponse'
      security:
      - BearerAuth: []
      summary: Get all messages that user communicate with specific audience
      tags:
      - chats
  /protected/get-room-id:
    get:
      consumes:
      - application/json
      description: Get roomID to communicate with audience (can omit this function
        by using the roomID format trainer_{trainerUsername}_trainee_{traineeUsername})  NOTICE
        THAT all time in chat is at UTC
      parameters:
      - description: audience of this conversation (username)
        in: query
        name: audience
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ChatRoomIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ChatRoomIDResponse'
      security:
      - BearerAuth: []
      summary: Get roomID to communicate with audience
      tags:
      - chats
  /protected/image:
    get:
      consumes:
      - application/json
      description: retrieve profile picture by username return json
      parameters:
      - description: username of the person you want profile picture
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ImageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ImageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ImageResponse'
      security:
      - BearerAuth: []
      summary: retrieve  profile picture
      tags:
      - image
    post:
      consumes:
      - image/png
      description: Upload profile picture
      parameters:
      - description: file for uploading
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ImageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ImageResponse'
      security:
      - BearerAuth: []
      summary: Upload profile picture
      tags:
      - image
  /protected/image2:
    get:
      consumes:
      - application/json
      description: retrieve profile picture by username return image
      parameters:
      - description: username of the person you want profile picture
        in: query
        name: username
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ImageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ImageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ImageResponse'
      security:
      - BearerAuth: []
      summary: retrieve  profile picture
      tags:
      - image
  /protected/payment-list:
    get:
      consumes:
      - application/json
      description: Get Payment list for trainer that is complete and paid
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
      security:
      - BearerAuth: []
      summary: Get Payment list
      tags:
      - payment
  /protected/payment-need-payouts:
    get:
      consumes:
      - application/json
      description: Get Payment list that is needed payout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.BookingListResponse'
      security:
      - BearerAuth: []
      summary: Get Payment Need Payout
      tags:
      - payment
  /protected/payout:
    post:
      consumes:
      - application/json
      description: Mark payment as payout
      parameters:
      - description: details for payout
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.PayoutForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
      security:
      - BearerAuth: []
      summary: Payout
      tags:
      - payment
  /protected/profile:
    get:
      consumes:
      - application/json
      description: getProfile of the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserProfileResponse'
        "401":
          description: Unauthorized, the user is not logged in
          schema:
            $ref: '#/definitions/responses.UserProfileResponse'
      security:
      - BearerAuth: []
      summary: getProfile of the current user
      tags:
      - user
  /protected/request-payout:
    post:
      consumes:
      - application/json
      description: Mark payment as needed payout
      parameters:
      - description: details for requesting payout
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestPayoutForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.RequestPayoutResponse'
      security:
      - BearerAuth: []
      summary: Request a payout
      tags:
      - payment
  /protected/reviewable:
    post:
      consumes:
      - application/json
      description: find if this trainee can still review a specific trainer by (find
        number of times trainee paid that trainer) minus (number of time trainee comment
        on that trainer)
      parameters:
      - description: Parameters for trainee reviewable (trainer username)
        in: body
        name: Reviewable
        required: true
        schema:
          $ref: '#/definitions/controllers.TraineeReviewableForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ReviewableResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ReviewableResponse'
      security:
      - BearerAuth: []
      summary: find if this trainee can still review a specific trainer
      tags:
      - Trainer
  /protected/reviews:
    post:
      consumes:
      - application/json
      description: Get reviews of specific trainer username from database sort by
        recent date then rating desc, limit number of output by limit
      parameters:
      - description: Parameters for querying trainer reviews
        in: body
        name: GetReviewsInput
        required: true
        schema:
          $ref: '#/definitions/controllers.GetReviewsForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TrainerReviewsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TrainerReviewsResponse'
      security:
      - BearerAuth: []
      summary: Get reviews of specific trainer
      tags:
      - Trainer
  /protected/today-event:
    get:
      consumes:
      - application/json
      description: Retrieve a list of today bookings for the user who is currently
        logged in
      parameters:
      - description: put date in query param in format yyyy-mm-dd
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.GetBookingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.GetBookingsResponse'
      security:
      - BearerAuth: []
      summary: Get today bookings for the logged in user
      tags:
      - bookings
  /protected/trainer:
    post:
      consumes:
      - application/json
      description: Retrieves the trainer profile information.
      parameters:
      - description: Put username input for retrieving the trainer profile
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.GetTrainerForm'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the trainer profile
          schema:
            $ref: '#/definitions/responses.TrainerProfileResponse'
        "400":
          description: Failed to retrieve the trainer profile
          schema:
            $ref: '#/definitions/responses.TrainerProfileResponse'
      security:
      - BearerAuth: []
      summary: Retrieve trainer profile
      tags:
      - Trainer
  /protected/trainer-profile:
    get:
      consumes:
      - application/json
      description: Retrieves the trainer profile information of the current user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the trainer profile
          schema:
            $ref: '#/definitions/responses.TrainerProfileResponse'
        "400":
          description: Failed to retrieve the trainer profile
          schema:
            $ref: '#/definitions/responses.TrainerProfileResponse'
      security:
      - BearerAuth: []
      summary: Retrieve trainer profile of current user
      tags:
      - Trainer
  /protected/update-booking:
    post:
      consumes:
      - application/json
      description: Update a booking of specified bookingId with the specified update
        input consist of status(pending/confirm/complete) and paymentStatus(pending/paid)
      parameters:
      - description: put updateBookingForm details and pass to gin.Context
        in: body
        name: json_in_ginContext
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateBookingForm'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully update booking
          schema:
            $ref: '#/definitions/responses.UpdateBookingResponse'
        "400":
          description: Bad Request, missing filed of objectId or cannot find bookingObjectId
          schema:
            $ref: '#/definitions/responses.UpdateBookingResponse'
      security:
      - BearerAuth: []
      summary: Update a booking
      tags:
      - bookings
  /protected/update-profile:
    post:
      consumes:
      - application/json
      description: updateProfile of the current user
      parameters:
      - description: put profile input json and pass to  gin.Context
        in: body
        name: ProfileToUpdate
        required: true
        schema:
          $ref: '#/definitions/controllers.ProfileDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ProfileResponse'
      security:
      - BearerAuth: []
      summary: updateProfile of the current user
      tags:
      - user
  /protected/update-trainer:
    post:
      consumes:
      - application/json
      parameters:
      - description: Trainer's information to update
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateTrainerDetails'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully update the trainer's profile
          schema:
            $ref: '#/definitions/responses.ProfileResponse'
        "400":
          description: Bad Request, either invalid input or user is not a trainer
          schema:
            $ref: '#/definitions/responses.ProfileResponse'
        "401":
          description: Unauthorized, the user is not logged in
          schema:
            $ref: '#/definitions/responses.ProfileResponse'
      security:
      - BearerAuth: []
      summary: Update the trainer's profile information.
      tags:
      - Trainer
  /protected/user:
    get:
      consumes:
      - application/json
      description: get the current user's username.  After getting token replied from
        logging in, put token in ginContext's token field
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CurrentUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CurrentUserResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: get the current user's username
      tags:
      - user
  /register:
    post:
      consumes:
      - application/json
      description: Register with username,password,UserType ["trainer","trainee"],Firstname,Lastname,Birthdate
        ("yyyy-mm-dd"),CitizenId (len == 13),Gender ["Male","Female","Other"],PhoneNumber
        (len ==10),Address,SubAddress
      operationId: register-user
      parameters:
      - description: put register input and pass to gin.Context
        in: body
        name: json_in_ginContext
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RegisterResponse'
      summary: Register user
      tags:
      - authentication
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
